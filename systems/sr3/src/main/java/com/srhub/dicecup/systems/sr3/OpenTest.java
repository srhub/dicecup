/*
 * Copyright 2012 Oliver Schrenk
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.srhub.dicecup.systems.sr3;

import java.util.List;

import com.srhub.dicecup.core.Cup;
import com.srhub.dicecup.core.Roll;
import com.srhub.dicecup.features.Features;
import com.srhub.dicecup.systems.base.Result;
import com.srhub.dicecup.util.Lists;

/**
 * Unlike other tests, the open test doesn't use a target number. Instead the
 * result might serve as the target number for other tests. Only the highest
 * result of the dice throw is returned.
 *
 * @author Oliver Schrenk <oliver.schrenk@gmail.com>
 *
 */
public class OpenTest {

	/**
	 * Rolls the dice and returns the highest number thrown.
	 *
	 * @param rating
	 *            The attribute or skill rating
	 * @return The highest number thrown
	 * @throws RuleOfOneException
	 *             Thrown when all dice show only a <code>1</code>.
	 */
	public Result<Roll> roll(final int rating) throws RuleOfOneException {

		final Roll roll = new Cup().add(rating, Features.EXPLODE_AT(6)).roll();

		return evaluate(roll, rating);
	}

	/**
	 * Evaluate.
	 *
	 * @param roll
	 *            the roll
	 * @param rating
	 *            the rating
	 * @return the result
	 * @throws RuleOfOneException
	 *             the rule of one exception
	 */
	public Result<Roll> evaluate(final Roll roll, final int rating)
			throws RuleOfOneException {

		final List<Integer> all = roll.all();

		if (roll.size() == Lists.count(all, Sr3.FAIL_AT)) {
			throw new RuleOfOneException();
		}

		final int highest = all.get(all.size() - 1);

		return new Result<Roll>(roll, highest);
	}
}
